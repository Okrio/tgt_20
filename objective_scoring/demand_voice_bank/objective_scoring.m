% The tgt_20 project.
% Copyright (C) 2020  Aaron Nicolson
%
% This program is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program.  If not, see <https://www.gnu.org/licenses/>.

clear all; close all; clc;

%% PARAMETERS
f_s = 16000; % sampling frequency (Hz).

%% PROCESSED (ENHANCED) SPEECH DIRECTORIES
y.dirs = {
    '/home/aaron/set/DEMAND_VB/noisy_testset_wav', ...
    '/mnt/hdd1/out/tgt_20/ibm_mse_demand_vb/e125/y',...
    '/mnt/hdd1/out/tgt_20/ibm_demand_vb/e125/y',...
    '/mnt/hdd1/out/tgt_20/irm_mse_demand_vb/e125/y',...
    '/mnt/hdd1/out/tgt_20/irm_demand_vb/e125/y',...
    '/mnt/hdd1/out/tgt_20/pow_db_demand_vb/e125/y',...
    '/mnt/hdd1/out/tgt_20/pow_db_std_demand_vb/e125/y',...
    '/mnt/hdd1/out/tgt_20/pow_db_norm_demand_vb/e125/y',...
    '/mnt/hdd1/out/tgt_20/mag_bar_mse_demand_vb/e125/y',...
    '/mnt/hdd1/out/tgt_20/mag_bar_demand_vb/e125/y',...
    '/mnt/hdd1/out/tgt_20/xi_db_demand_vb/e125/y/mmse-lsa',...
    '/mnt/hdd1/out/tgt_20/xi_db_demand_vb/e125/y/srwf',...
    '/mnt/hdd1/out/tgt_20/xi_db_std_demand_vb/e125/y/mmse-lsa',...
    '/mnt/hdd1/out/tgt_20/xi_db_std_demand_vb/e125/y/srwf',...
    '/mnt/hdd1/out/tgt_20/xi_bar_mse_demand_vb/e125/y/mmse-lsa',...
    '/mnt/hdd1/out/tgt_20/xi_bar_mse_demand_vb/e125/y/srwf',...
    '/mnt/hdd1/out/tgt_20/xi_bar_demand_vb/e125/y/mmse-lsa',...
    '/mnt/hdd1/out/tgt_20/xi_bar_demand_vb/e125/y/srwf',...
    '/mnt/hdd1/out/tgt_20/xi_gamma_db_demand_vb/e125/y/mmse-lsa',...
    '/mnt/hdd1/out/tgt_20/xi_gamma_bar_mse_demand_vb/e125/y/mmse-lsa',...
    '/mnt/hdd1/out/tgt_20/xi_gamma_bar_demand_vb/e125/y/mmse-lsa',...
    '/mnt/hdd1/out/tgt_20/mag_norm_demand_vb/e125/y',...
    '/mnt/hdd1/out/tgt_20/pow_db_norm_mse_demand_vb/e125/y',...
    '/mnt/hdd1/out/tgt_20/mag_norm_mse_demand_vb/e125/y',...
    '/mnt/hdd1/out/tgt_20/xi_db_norm_demand_vb/e125/y/mmse-lsa',...
    '/mnt/hdd1/out/tgt_20/xi_db_norm_demand_vb/e125/y/srwf',...
    '/mnt/hdd1/out/tgt_20/xi_norm_mse_demand_vb/e125/y/mmse-lsa',...
    '/mnt/hdd1/out/tgt_20/xi_norm_mse_demand_vb/e125/y/srwf',...
    '/mnt/hdd1/out/tgt_20/mag_bar_mse_demand_vb/e125/y',...
    '/mnt/hdd1/out/tgt_20/mag_bar_demand_vb/e125/y',...
    '/mnt/hdd1/out/tgt_20/xi_db_norm_mse_demand_vb/e125/y/mmse-lsa',...
    };

y.dirs = {
         '/mnt/hdd1/out/tgt_20/xi_gamma_db_norm_demand_vb/e125/y/mmse-lsa',...
%          '/mnt/hdd1/out/tgt_20/xi_gamma_db_norm_mse_demand_vb/e125/y/mmse-lsa',...
%       '/mnt/hdd1/out/tgt_20/xi_norm_demand_vb/e125/y/srwf',...
%     '/mnt/hdd1/out/tgt_20/xi_gamma_norm_mse_demand_vb/e125/y/mmse-lsa',...
%     '/mnt/hdd1/out/tgt_20/xi_norm_demand_vb/e125/y/mmse-lsa',...
%      '/mnt/hdd1/out/tgt_20/xi_gamma_db_norm_demand_vb/e125/y/mmse-lsa',...
    };

%% REFERENCE (CLEAN) SPEECH DIRECTORY
s.paths = dir('/home/aaron/set/DEMAND_VB/clean_testset_wav/*.wav');

%% OBJECTIVE SCORES DIRECTORY
res_dir = 'results';
if ~exist(res_dir, 'dir')
    mkdir(res_dir)
end

%% OBJECTIVE SCORING
for i = 1:length(y.dirs)

    S.CSIG = [];
    S.CBAK = [];
    S.COVL = [];
    S.PESQ = [];
    S.STOI = [];
    S.SegSNR = [];
    S.SNR = [];

    split_str = strsplit(y.dirs{i}, '/');
    if strcmp(split_str{end-1}, 'y')
        ver = [split_str{end-3}, '_', split_str{end-2}, '_', split_str{end}];
    elseif strcmp(split_str{end}, 'y')
        ver = [split_str{end-2}, '_', split_str{end-1}];
    elseif strcmp(split_str{end}, 'noisy_testset_wav')
        ver = 'noisy_speech';
    else
        error('Version error')
    end

    for j = 1:length(s.paths)

        s.wav = audioread([s.paths(j).folder, '/', s.paths(j).name]);
        y.wav = audioread([y.dirs{i}, '/', s.paths(j).name]);
        y.wav = y.wav(1:length(s.wav));

        if any(isnan(y.wav(:))) || any(isinf(y.wav(:)))
            error('NaN or Inf value in enhanced speech.')
        end

        [CSIG, CBAK, COVL] = composite(s.wav, y.wav, f_s);
        PESQ = pesq(s.wav, y.wav, f_s);
        STOI = stoi(s.wav, y.wav, f_s);
        [SNR, SegSNR]= comp_snr(s.wav, y.wav, f_s);

        S.CSIG(end+1) = CSIG;
        S.CBAK(end+1) = CBAK;
        S.COVL(end+1) = COVL;
        S.PESQ(end+1) = PESQ;
        S.STOI(end+1) = STOI;
        S.SegSNR(end+1) = SegSNR;
        S.SNR(end+1) = SNR;

        clc;
        fprintf('%.2f%%\n', 100*j/length(s.paths));
    end

    save(['./results/', ver, '.mat'], 'S');

    if ~exist('./results/average.csv', 'file')
        fileID = fopen('./results.txt', 'w');
        fprintf(fileID, 'ver, CSIG, CBAK, COVL, PESQ, STOI, SegSNR, SNR\n');
        fclose(fileID);
    end

    fileID = fopen('./results/average.csv', 'a');
    fprintf(fileID, '%s, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f\n', ver, ...
        mean(S.CSIG), ...
        mean(S.CBAK), ...
        mean(S.COVL), ...
        mean(S.PESQ), ...
        mean(S.STOI)*100, ...
        mean(S.SegSNR), ...
        mean(S.SNR));
    fclose(fileID);
end
% EOF
